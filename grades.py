# -*- coding: utf-8 -*-
"""
자바 프로그래밍 성적 데이터 및 계산 함수
"""

# 분반별 성적 데이터 딕셔너리
# 데이터 형식: [중간고사, 중간EXTRA, 기말고사, 연습1, 연습2, 연습3, 연습4, 연습5]

# 1분반 데이터
grades_class1 = {
    "0066": [78, 10, 44, 10, 9, 10, 9, 7],
    "0201": [72, 10, 43, 10, 10, 10, 9, 10],
    "0328": [29, 10, 32, 9, 10, 10, 9, 9],
    "0481": [79, 10, 65, 0, 0, 9, 9, 10],
    "0629": [26, 10, 22, 10, 10, 10, 10, 10],
    "0718": [46, 10, 29, 0, 10, 9, 9, 10],
    "0725": [38, 10, 56, 10, 10, 10, 10, 10],
    "0793": [14, 10, 5, 0, 0, 9, 9, 0],
    "0928": [44, 10, 10, 10, 10, 9, 0, 0],
    "1005": [1, 10, 0, 0, 0, 0, 0, 0],
    "1016": [9, 10, 15, 8, 6, 0, 0, 0],
    "1216": [6, 0, 0, 3, 0, 8, 0, 0],
    "1221": [46, 10, 0, 0, 0, 7, 0, 0],
    "1234": [1, 10, 9, 10, 0, 0, 10, 10],
    "1328": [51, 10, 60, 10, 10, 10, 10, 10],
    "1804": [14, 10, 5, 10, 10, 10, 10, 10],
    "2001": [39, 10, 21, 10, 10, 10, 10, 10],
    "2048": [78, 10, 86, 10, 10, 9, 10, 10],
    "3224": [47, 10, 35, 10, 10, 10, 10, 10],
    "3378": [48, 10, 47, 10, 10, 10, 10, 10],
    "3395": [20, 10, 36, 10, 10, 10, 10, 10],
    "3473": [17, 10, 12, 6, 0, 0, 0, 0],
    "3597": [21, 10, 11, 10, 10, 10, 9, 9],
    "3711": [85, 10, 81, 10, 9, 10, 9, 8],
    "5290": [29, 10, 33, 10, 10, 9, 10, 10],
    "5667": [29, 10, 12, 10, 10, 10, 10, 10],
    "5783": [76, 10, 68, 10, 10, 10, 9, 9],
    "7856": [30, 1, 31, 0, 10, 0, 10, 10],
    "7900": [92, 10, 44, 10, 10, 10, 10, 10],
    "7953": [20, 10, 39, 10, 10, 10, 10, 10],
    "8067": [24, 10, 31, 10, 10, 10, 10, 10],
    "8283": [32, 10, 49, 10, 10, 10, 10, 10],
    "8539": [16, 10, 22, 10, 10, 10, 8, 8],
    "9081": [55, 10, 38, 10, 10, 10, 9, 10],
    "9087": [55, 10, 38, 10, 9, 10, 9, 10],
    "9128": [7, 10, 4, 10, 10, 10, 9, 9],
}

# 2분반 데이터 (기존 데이터)
grades_class2 = {
    "0000": [56, 10, 52, 10, 10, 0, 10, 10],
    "0103": [93, 10, 84, 10, 10, 10, 10, 10],
    "0303": [20, 10, 14, 10, 10, 10, 10, 10],
    "0305": [32, 10, 13, 0, 9, 9, 9, 10],
    "0314": [35, 10, 34, 10, 9, 10, 10, 10],
    "0412": [14, 10, 9, 10, 10, 9, 9, 9],
    "0429": [10, 10, 6, 0, 0, 10, 9, 10],
    "0507": [3, 10, 8, 10, 10, 10, 9, 9],
    "0552": [16, 10, 36, 10, 10, 9, 10, 10],
    "0613": [25, 10, 23, 10, 10, 0, 0, 0],
    "0709": [58, 10, 39, 10, 10, 10, 9, 9],
    "0817": [43, 10, 40, 10, 10, 8, 0, 0],
    "1024": [77, 10, 51, 10, 10, 10, 6, 10],
    "1109": [67, 10, 42, 10, 10, 10, 10, 10],
    "1234": [45, 10, 43, 10, 10, 10, 9, 10],
    "1315": [60, 10, 33, 10, 10, 10, 9, 10],
    "1414": [20, 10, 21, 10, 10, 9, 10, 10],
    "1835": [52, 10, 49, 10, 10, 10, 10, 10],
    "2136": [22, 10, 23, 10, 10, 9, 9, 9],
    "2267": [21, 10, 35, 10, 10, 10, 10, 10],
    "2464": [14, 10, 18, 10, 10, 10, 9, 9],
    "2580": [50, 10, 27, 10, 0, 10, 8, 9],
    "2603": [57, 10, 73, 10, 10, 10, 10, 10],
    "3056": [64, 10, 54, 10, 10, 10, 9, 10],
    "3138": [15, 0, 18, 0, 10, 9, 0, 9],
    "3165": [50, 10, 33, 9, 10, 10, 10, 10],
    "3581": [23, 10, 37, 10, 9, 7, 10, 10],
    "3923": [11, 0, 7, 10, 8, 0, 0, 0],
    "4060": [14, 10, 3, 10, 10, 10, 10, 10],
    "5093": [37, 10, 10, 10, 10, 10, 9, 10],
    "5631": [56, 10, 50, 10, 10, 10, 10, 10],
    "6127": [15, 10, 48, 10, 10, 10, 9, 10],
    "6758": [25, 10, 42, 10, 10, 10, 8, 10],
    "8096": [9, 10, 6, 10, 10, 10, 9, 10],
    "8273": [34, 10, 46, 10, 10, 10, 10, 10],
    "9243": [58, 10, 47, 10, 10, 10, 10, 10],
}

# 분반별 데이터 통합
all_grades = {
    "1분반": grades_class1,
    "2분반": grades_class2
}

def get_grades_by_class(class_name):
    """
    분반별 성적 데이터를 반환
    
    Args:
        class_name (str): "1분반" 또는 "2분반"
    
    Returns:
        dict: 해당 분반의 성적 데이터
    """
    return all_grades.get(class_name, {})

def calc_score(student_scores):
    """
    학생의 총점을 계산하는 함수
    
    Args:
        student_scores (list): [중간고사, 중간EXTRA, 기말고사, 연습과제1, 연습과제2, 연습과제3, 연습과제4, 연습과제5]
    
    Returns:
        float: 총점 (소수점 2자리)
    
    가중치 (출석 10% 제외, 90%를 100%로 비례 확대):
    - 중간고사 + 중간EXTRA: 30% → 33.33% (30/90*100)
    - 기말고사: 40% → 44.44% (40/90*100)
    - 연습과제: 20% → 22.22% (20/90*100)
    
    계산 공식:
    total = (mid + mid_extra) * 33.33/100 + final * 44.44/100 + sum(exercises) * 22.22/100
    """
    try:
        if len(student_scores) != 8:
            print(f"잘못된 데이터 형식: {len(student_scores)}개 요소 (8개 필요)")
            return 0.0
            
        mid = student_scores[0]           # 중간고사
        mid_extra = student_scores[1]     # 중간 EXTRA
        final = student_scores[2]         # 기말고사
        exercises = student_scores[3:8]   # 연습과제 5개
        
        # 총점 계산 (출석 10% 제외, 나머지 90%를 100%로 비례 확대)
        # 중간고사+중간EXTRA: 30% → 33.33%
        mid_total_weight = 33.33
        # 기말고사: 40% → 44.44%
        final_weight = 44.44
        # 연습과제: 20% → 22.22%
        exercise_weight = 22.22
        
        total = (
            (mid + mid_extra) * mid_total_weight / 100 +     # 중간고사 + 중간EXTRA (33.33%)
            final * final_weight / 100 +                     # 기말고사 (44.44%)
            sum(exercises) * exercise_weight / 100           # 연습과제 합계 (22.22%)
        )
        
        return round(total, 2)
        
    except (IndexError, TypeError) as e:
        print(f"데이터 처리 중 오류 발생: {e}")
        return 0.0
    except Exception as e:
        print(f"점수 계산 중 오류 발생: {e}")
        return 0.0

def get_student_data_dict(student_scores):
    """
    리스트 형태의 성적을 딕셔너리로 변환 (UI 표시용)
    
    Args:
        student_scores (list): [중간고사, 중간EXTRA, 기말고사, 연습과제1, 연습과제2, 연습과제3, 연습과제4, 연습과제5]
    
    Returns:
        dict: 딕셔너리 형태의 성적 데이터
    """
    return {
        "mid": student_scores[0],
        "mid_extra": student_scores[1],
        "final": student_scores[2],
        "exercises": student_scores[3:8]
    }

def get_all_scores(class_name):
    """
    특정 분반의 모든 학생 총점을 계산하여 반환
    
    Args:
        class_name (str): "1분반" 또는 "2분반"
    
    Returns:
        dict: {학번: 총점} 형태의 딕셔너리
    """
    scores = {}
    grades = get_grades_by_class(class_name)
    for student_id, scores_list in grades.items():
        scores[student_id] = calc_score(scores_list)
    return scores

def get_student_rank(student_id, class_name):
    """
    특정 분반에서 학생의 등수를 계산
    
    Args:
        student_id (str): 학번
        class_name (str): "1분반" 또는 "2분반"
    
    Returns:
        int: 등수 (1부터 시작)
    """
    all_scores = get_all_scores(class_name)
    if student_id not in all_scores:
        return -1
    
    student_score = all_scores[student_id]
    # 자신보다 높은 점수의 개수 + 1이 등수
    rank = sum(1 for score in all_scores.values() if score > student_score) + 1
    return rank

def get_available_classes():
    """
    사용 가능한 분반 목록 반환
    
    Returns:
        list: 분반 이름 리스트
    """
    return list(all_grades.keys()) 